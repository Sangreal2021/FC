[Ch.07 실전 프로젝트 6 : 가맹점 서버 개발] - delivery 프로젝트 이어서

※ 초기 설정
	- 최상단 service 우클릭 -> 새로만들기 -> module -> 이름 store-admin -> 생성
	
	- 최상위 src 폴더 삭제
	
	- build.gradle(:api)의 내용을 build.gradle(:store-admin)에 붙이고 수정 -> 새로고침
		plugins {
			id 'java'
			id 'org.springframework.boot'
			id 'io.spring.dependency-management'
		}

		group = 'org.delivery'
		version = '1.0-SNAPSHOT'
		java {
			sourceCompatibility = '11'
		}

		configurations {
			compileOnly {
				extendsFrom annotationProcessor
			}
		}

		repositories {
			mavenCentral()
		}

		dependencies {
			compileOnly 'org.projectlombok:lombok'
			annotationProcessor 'org.projectlombok:lombok'

			implementation 'org.springframework.boot:spring-boot-starter-web'
			testImplementation 'org.springframework.boot:spring-boot-starter-test'

			implementation project(':db')

			// jpa
			implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

			// swagger
			implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
		}

		test {
			useJUnitPlatform()
		}

		bootJar{
			enabled = true
		}

		jar{
			enabled = false
		}

	- store-admin에 java 폴더에 org.delivery.storeadmin 패키지 생성 후 StoreAdminApplication 클래스 생성
		@SpringBootApplication
		public class StoreAdminApplication {
			
			public static void main(String[] args) {
				SpringApplication.run(StoreAdminApplication.class, args);
			}
		}
		
	- main.resources에 application.yaml 파일 생성(Tomcat 포트 8081로 설정)
	
		server:
		  port: 8081

		spring:
		  application:
			name: store-admin

		  jpa:
			show-sql: true
			properties:
			  format_sql: true
			  dialect: org.hibernate.dialect.MySQL8Dialect
			hibernate:
			  ddl-auto: validate
		  datasource:
			url: jdbc:mysql://localhost:3306/delivery?useSSL=false&useUnicode=true&allowPublicKeyRetrieval=true
			driver-class-name: com.mysql.cj.jdbc.Driver
			username: root
			password: admin123!


----------------------------------------------------------------------------------------------------------------------
1. Spring Security 소개
	- Spring Security는 스프링 기반의 어플리케이션에서의 인증(Authentication)과
		권한부여(Authorization)을 구현해둔 보안 프레임워크.
	- 기본적으로 기능이 다 막혀있고, 사용자가 필요한 부분만 열어서 쓰는 시스템.
		
	(1) 주요 기능
		1) 인증 : 사용자가 자신의 신원을 증명하고 로그인 할 수 있도록 제공.
		2) 권한부여 : 인증된 사용자에게 특정 작업 또는 리소스에 접근 권한을 부여.
		3) 세션관리 : 사용자의 세션을 관리하고, 세션 유지 및 만료 시간을 설정.
		4) 보안설정 : 보안 관련 구성을 통하여, URL 또는 리소스에 대한 보안 설정.
		5) 보안 이벤트 처리 : 인증 및 권한 에러에 대한 이벤트 핸들링을 제공.


2. Spring Security를 통한 가맹점 서버 개발 - 1

	(1) swagger 확인
		1) store-admin 스프링 부트 실행 시켜놓고 swagger 확인.(PORT 8081 확인!!)
			- http://localhost:8081/swagger-ui/index.html
			
		2) build.gradle(:store-admin)에 spring security 추가
			dependencies {
				compileOnly 'org.projectlombok:lombok'
				annotationProcessor 'org.projectlombok:lombok'

				// spring security
				implementation 'org.springframework.boot:spring-boot-starter-security'

				implementation 'org.springframework.boot:spring-boot-starter-web'
				testImplementation 'org.springframework.boot:spring-boot-starter-test'

				implementation project(':db')

				// jpa
				implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

				// swagger
				implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.7.0'
			}
			
			-> 새로고침 후 Gradle 에서 store-admin -> Dependencies -> compileClasspath에 security 확인!
			-> 이후 다시 스웨거 새로고침 하면 로그인 화면 뜨는 것 확인!!!


3. Spring Security를 통한 가맹점 서버 개발 - 2
	- storeadmin.config 패키지 생성 후 그 아래 jpa, security 패키지 각각 생성.

	(1) delivery.storeadmin.config.jpa 에 JpaConfig 클래스 생성

		@Configuration
		@EntityScan(basePackages = "org.delivery.db")
		@EnableJpaRepositories(basePackages = "org.delivery.db")
		public class JpaConfig {
		}
		
	(2) delivery.storeadmin.config.security 에 SecurityConfig 클래스 생성
		
		@Configuration
		@EnableWebSecurity  // security  활성화
		public class SecurityConfig {

			private List<String> SWAGGER = List.of(
				"/swagger-ui.html",
				"/swagger-ui/**",
				"/v3/api-docs/**"
			);

			@Bean
			public SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {
				httpSecurity
					.csrf().disable()
					.authorizeHttpRequests(it ->{
						it
							.requestMatchers(
								PathRequest.toStaticResources().atCommonLocations()
							).permitAll()   // resource 에 대해서는 모든 요청 허용
							// swagger 는 인증 없이 통과
							.mvcMatchers(
								SWAGGER.toArray(new String[0])
							).permitAll()
							// open-api / ** 하위 모든 주소는 인증 없이 통과
							.mvcMatchers(
								"/open-api/**"
							).permitAll()
							// 그 외 모든 요청은 인증 사용
							.anyRequest().authenticated()
							;
					})
					.formLogin(Customizer.withDefaults());

				return httpSecurity.build();
			}
		}
	
		
		---------- 최신 Spring Boot 의 Security 코드 바뀜(★★★ 강의 내용과 다름!! ★★★) ----------
		@Configuration
		@EnableWebSecurity // security 활성화
		public class SecurityConfig {
			
			private List<String> SWAGGER = List.of(
				"/swagger-ui.html",
				"/swagger-ui/**",
				"/v3/api-docs/**"
			);

			@Bean
			public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
				http
					.csrf(AbstractHttpConfigurer::disable);
				http
					.authorizeHttpRequests(
						auth -> {
							auth
								// 정적 리소스에 대한 모든 요청 허용
								.requestMatchers(
									PathRequest.toStaticResources().atCommonLocations()
								).permitAll()
								// Swagger UI 접근 허용
								.requestMatchers(
									SWAGGER.toArray(new String[0])
								).permitAll()
								// open-api 하위 모든 주소는 인증 없이 통과
								.requestMatchers(
									"/open-api/**"
								).permitAll()
								// "/main" 및 "/" 경로도 인증 없이 허용
								.requestMatchers(
									"/", "/main"
								).permitAll()
								.anyRequest().authenticated();
						} // 그 외 모든 요청은 인증 필요
					)
					.formLogin()
					.defaultSuccessUrl("/main", true); // 로그인 성공 후 "/main"으로 리디렉션
				
				return http.build();
			}
		}
		----------------------------------------------------------------------------------------
		
	(3) Workbench ERD에서 store_user 테이블 생성
	
	(4) 위의 store_user 테이블 SQL 복/붙으로 DBeaver에 store_user 테이블 생성
	
		CREATE TABLE IF NOT EXISTS `store_user` (
		  `id` BIGINT(32) NOT NULL AUTO_INCREMENT,
		  `store_id` BIGINT(32) NOT NULL,
		  `email` VARCHAR(100) NOT NULL,
		  `password` VARCHAR(100) NOT NULL,
		  `status` VARCHAR(50) NOT NULL,
		  `role` VARCHAR(50) NOT NULL,
		  `registered_at` DATETIME NULL,
		  `unregistered_at` DATETIME NULL,
		  `last_login_at` DATETIME NULL,
		  PRIMARY KEY (`id`),
		  INDEX `idx_store_id` (`store_id` ASC) VISIBLE)
		ENGINE = InnoDB;

		SELECT * FROM store_user;
		
	(5) db.storeuser 패키지 생성 후 StoreUserEntity 클래스 생성
	
		1) db.storeuser.enums 패키지 생성 후 아래 2개 이넘 클래서 작성
		
			@AllArgsConstructor
			public enum StoreUserStatus {
				
				REGISTERED("등록"),
				UNREGISTERED("해지"),
				;
				
				private String description;
			}
			---------------------------------------
			@AllArgsConstructor
			public enum StoreUserRole {
				
				MASTER("마스터"),
				ADMIN("관리자"),
				USER("일반유저"),
				;
				
				private String description;
			}
		
		2) db.storeuser 에 StoreUserEntity
		
			@SuperBuilder
			@EqualsAndHashCode(callSuper = true)
			@Data
			@NoArgsConstructor
			@AllArgsConstructor
			@Entity
			@Table(name = "store_user")
			public class StoreUserEntity extends BaseEntity {

				@Column(nullable = false)
				private Long storeId;
				
				@Column(length = 100, nullable = false)
				private String email;
				
				@Column(length = 100, nullable = false)
				private String password;
				
				@Column(length = 50, nullable = false)
				@Enumerated(EnumType.STRING)
				private StoreUserStatus status;
				
				@Column(length = 50, nullable = false)
				@Enumerated(EnumType.STRING)
				private StoreUserRole role;
				
				private LocalDateTime registeredAt;
				
				private LocalDateTime unregisteredAt;
				
				private LocalDateTime lastLoginAt;
			}
			
	(6) db.storeuser 에 StoreUserRepository 인터페이스 생성
	
		public interface StoreUserRepository extends JpaRepository<StoreUserEntity, Long> {
			
			// select * from store_user where email = ? and status = ? order by id desc limit 1
			Optional<StoreUserEntity> findFirstByEmailAndStatusOrderByIdDesc(String email, StoreUserStatus status);
		}
		

4. 가맹점 유저 가입 개발
	- store-admin 모듈에서..
	- storeadmin.domain.user 패키지 생성 후 하위에 business, controller, converter, service 패키지 생성

	(1) storeadmin.domain.user.service 에 StoreUserService 클래스 생성
	
		1) storeadmin.config.security 에 SecurityConfig 에 추가
			- BCrypt 방식의 암호화 메소드 Bean으로 등록
			
			@Bean
			public PasswordEncoder passwordEncoder() {
				// hash 방식으로 암호화 -> 인코딩 O, 디코딩 X
				return new BCryptPasswordEncoder();
			}
			
		2) StoreUserService 작성

			@RequiredArgsConstructor
			@Service
			public class StoreUserService {
				
				private final StoreUserRepository storeUserRepository;
				private final PasswordEncoder passwordEncoder;
				
				public StoreUserEntity register(
					StoreUserEntity storeUserEntity
				) {
					storeUserEntity.setStatus(StoreUserStatus.REGISTERED);
					storeUserEntity.setPassword(passwordEncoder.encode(storeUserEntity.getPassword()));
					storeUserEntity.setRegisteredAt(LocalDateTime.now());
					
					return storeUserRepository.save(storeUserEntity);
				}
				
				public Optional<StoreUserEntity> getRegisterUser(String email) {
					return storeUserRepository.findFirstByEmailAndStatusOrderByIdDesc(email, StoreUserStatus.REGISTERED);
				}
			}
			
	(2) storeadmin.domain.user.controller 에 StoreUserOpenApiController 클래스 생성
		
		1) storeadmin.domain.user.controller.model 에 StoreUserResponse 클래스 생성
			- Inner Class(내부 클래스)
				: StoreUserResponse. 으로 접근할 수 있는 클래스
		
			@Data
			@NoArgsConstructor
			@AllArgsConstructor
			@Builder
			public class StoreUserResponse {
				
				private UserResponse user;
				private StoreResponse store;
				
				// Inner Class 생성
				@Data
				@NoArgsConstructor
				@AllArgsConstructor
				@Builder
				public static class UserResponse { // 사용자 정보
					private Long id;
					private String email;
					private StoreUserStatus status;
					private StoreUserRole role;
					private LocalDateTime registeredAt;
					private LocalDateTime unregisteredAt;
					private LocalDateTime lastLoginAt;
				}
				
				@Data
				@NoArgsConstructor
				@AllArgsConstructor
				@Builder
				public static class StoreResponse {    // 가게 정보
					private Long id;        // 가맹점 ID
					private String name;    // 가맹점 이름
				}
			}
			
		2) storeadmin.domain.user.controller.model 에 StoreUserRegisterRequest 클래스 생성
		
			@Data
			@NoArgsConstructor
			@AllArgsConstructor
			public class StoreUserRegisterRequest {

				@NotBlank
				private String storeName;
				
				@NotBlank
				private String email;
				
				@NotBlank
				private String password;
				
				@NotBlank
				private StoreUserRole role;
			}
			
		3) db.store에 StoreRepository 추가
		
			public interface StoreRepository extends JpaRepository<StoreEntity, Long> {
				
				// 유효한 스토어
				// select * from store where id = ? and status = ? order by id desc limit 1
				Optional<StoreEntity> findFirstByIdAndStatusOrderByIdDesc(Long id, StoreStatus status);
				
				// 유효한 스토어 리스트
				// select * from store where status = ? order by id desc
				List<StoreEntity> findAllByStatusOrderByIdDesc(StoreStatus status);
				
				// 유효한 특정 카테고리의 스토어 리스트
				List<StoreEntity> findAllByStatusAndCategoryOrderByStarDesc(StoreStatus status, StoreCategory storeCategory);
				
				// select * from store where name = ? and status = ? order by id desc limit 1
				Optional<StoreEntity> findFistByNameAndStatusOrderByIdDesc(String name, StoreStatus status);
			}
			
		4) storeadmin.domain.user.business 에 StoreUserBusiness 클래스 생성
		
			@RequiredArgsConstructor
			@Service
			public class StoreUserBusiness {
				
				private final StoreUserConverter storeUserConverter;
				private final StoreUserService storeUserService;
				private final StoreRepository storeRepository; // TODO service 로 변경하기
				
				public StoreUserResponse register(
					StoreUserRegisterRequest request
				){
					var storeEntity = storeRepository.findFistByNameAndStatusOrderByIdDesc(request.getStoreName(), StoreStatus.REGISTERED);
					
					var entity = storeUserConverter.toEntity(request, storeEntity.get());
					
					var newEntity = storeUserService.register(entity);
					
					var response = storeUserConverter.toResponse(newEntity, storeEntity.get());
					
					return response;
				}
			}
		
		5) storeadmin.domain.user.converter 에 StoreUserConverter 클래스 생성
		
			@RequiredArgsConstructor
			@Service
			public class StoreUserConverter {
				
				public StoreUserEntity toEntity(
					StoreUserRegisterRequest request,
					StoreEntity storeEntity
				) {
					return StoreUserEntity.builder()
						.email(request.getEmail())
						.password(request.getPassword())
						.role(request.getRole())
						.storeId(storeEntity.getId()) // TODO null 일때 에러 체크 확인 필요
						.build();
				}
				
				public StoreUserResponse toResponse(
					StoreUserEntity storeUserEntity,
					StoreEntity storeEntity
				) {
					return StoreUserResponse.builder()
						.user(
							StoreUserResponse.UserResponse.builder()
								.id(storeUserEntity.getId())
								.email(storeUserEntity.getEmail())
								.status(storeUserEntity.getStatus())
								.role(storeUserEntity.getRole())
								.registeredAt(storeUserEntity.getRegisteredAt())
								.unregisteredAt(storeUserEntity.getUnregisteredAt())
								.lastLoginAt(storeUserEntity.getLastLoginAt())
								.build()
						)
						.store(
							StoreUserResponse.StoreResponse.builder()
								.id(storeEntity.getId())
								.name(storeEntity.getName())
								.build()
						)
						.build();
				}
			}
			
		6) storeadmin.domain.user.controller 에 StoreUserOpenApiController 작성
		
			@RequiredArgsConstructor
			@RestController
			@RequestMapping("/open-api/store-user")
			public class StoreUserOpenApiController {
				
				private final StoreUserBusiness storeUserBusiness;
				
				@PostMapping("")
				public StoreUserResponse register(
					@Valid
					@RequestBody StoreUserRegisterRequest request
				) {
					var response = storeUserBusiness.register(request);
					return response;
				}
			}

	(3) swagger에서 확인
		1) http://localhost:8081/swagger-ui/index.html
		
		2) store-user-open-api-controller
			{
			  "storeName": "스타벅스 강남",
			  "email": "master@gmail.com",
			  "password": "1234",
			  "role": "MASTER"
			}
			-> 등록
			
5. Spring Security에서의 가맹점 유저 로그인 처리

	(1) storeadmin.domain.authorization 에 AuthorizationService 클래스 생성
		- alt+Enter로 메소드 자동 구현
		- localhost:8081 로 들어갔을 때 Username(우리는 email), Password 처리
	
		@RequiredArgsConstructor
		@Service
		public class AuthorizationService implements UserDetailsService {
			
			private final StoreUserService storeUserService;
			
			@Override
			public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
				
				var storeUserEntity = storeUserService.getRegisterUser(username);
				
				// 1. localhost:8081에서 입력한 사용자 이메일(username)이 있다면 User 객체에 담음.
				// 2. 사용자가 입력한 암호를 가져와 UserDetails 에 있는 암호와 hash 로 비교.
				return storeUserEntity.map(it -> {
					var user = User.builder()
						.username(it.getEmail())
						.password(it.getPassword())
						.roles(it.getRole().toString())
						.build();
					
					return user;
				})
				.orElseThrow(() -> new UsernameNotFoundException(username));
			}
		}
		
		-> localhost:8081 로 들어가서 master@gmail / 1234 로 로그인 하면 일단 성공!!
		
	(2) build.gradle(:store-admin)에 thymeleaf 추가
	
		dependencies {
			compileOnly 'org.projectlombok:lombok'
			annotationProcessor 'org.projectlombok:lombok'

			// thymeleaf
			implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

			// spring security
			implementation 'org.springframework.boot:spring-boot-starter-security'

			implementation 'org.springframework.boot:spring-boot-starter-web'
			testImplementation 'org.springframework.boot:spring-boot-starter-test'

			implementation project(':db')

			// jpa
			implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

			// swagger
			implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
		}

	(3) store-admin 모듈에 resources 하위에 templates 디렉토리 생성 후
	
		1) main.html 생성
	
			<!DOCTYPE html>
			<html lang="kor">
			<head>
				<meta charset="UTF-8">
				<title>Title</title>
			</head>
			<body>
				<h1>MAIN PAGE</h1>
			</body>
			</html>
			
		2) templates.order 패키지 하위에 order.html 생성
		
			<!DOCTYPE html>
			<html lang="en">
			<head>
				<meta charset="UTF-8">
				<title>Title</title>
			</head>
			<body>

			</body>
			</html>
		
	(4) storeadmin.presentation 패키지 생성 후 PageController 클래스 생성
		- page 이동 담당하는 컨트롤러

		@Controller
		@RequestMapping("")
		public class PageController {
			
			@RequestMapping(path = {"","/main"})
			public ModelAndView main() {
				// 아래 main 에 .html 이 붙어서 Front-End 로 연결
				return new ModelAndView("main");
			}
			
			@RequestMapping("/order")
			public ModelAndView order(){
				// order 패키지 아래 order.html 로 연동
				return new ModelAndView("order/order");
			}
		}
		
		-> http://localhost:8081 치고 master@gmail.com / 1234 치면 main.html로 이동!!
		
		
===================== localhost:8081 에서 ID, PW 치고 들어갈 때 main으로 연결안되는거 해결!! =====================
	
※※※ Spring Security의 SecurityConfig 최신 코드 ※※※

	@Configuration
	@EnableWebSecurity // security 활성화
	public class SecurityConfig {
		
		private final List<String> SWAGGER = List.of(
			"/swagger-ui.html",
			"/swagger-ui/**",
			"/v3/api-docs/**"
		);
		
		@Bean
		public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
			http
				.csrf(AbstractHttpConfigurer::disable);
			http
				.authorizeHttpRequests(
					auth -> {
						auth
							// 정적 리소스에 대한 모든 요청 허용
							.requestMatchers(
								PathRequest.toStaticResources().atCommonLocations()
							).permitAll()
							// Swagger UI 접근 허용
							.requestMatchers(
								SWAGGER.toArray(new String[0])
							).permitAll()
							// open-api 하위 모든 주소는 인증 없이 통과
							.requestMatchers(
								"/open-api/**"
							).permitAll()
							// "/main" 및 "/" 경로도 인증 없이 허용
							.requestMatchers(
								"/", "/main"
							).permitAll()
							.anyRequest().authenticated();
					} // 그 외 모든 요청은 인증 필요
				)
				.formLogin()
				.defaultSuccessUrl("/main", true); // 로그인 성공 후 "/main"으로 리디렉션
			
			return http.build();
		}

		
	//    @Bean
	//    public SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {
	//        httpSecurity
	//            // csrf 비활성화
	//            .csrf().disable()
	//            .authorizeHttpRequests(it -> {
	//                it
	//                    .requestMatchers(
	//                        PathRequest.toStaticResources().atCommonLocations()
	//                    ).permitAll()   // 정적 리소스에 대한 모든 요청 허용
	//
	//                    // Swagger 는 인증 없이 통과
	//                    .mvcMatchers(
	//                        SWAGGER.toArray(new String[0])
	//                    ).permitAll()
	//
	//                    // 그 외 모든 요청은 인증 사용
	//                    .anyRequest().authenticated();
	//            })
	//            .formLogin(Customizer.withDefaults());
	//
	//        return httpSecurity.build();
	//    }
		
		@Bean
		public PasswordEncoder passwordEncoder() {
			// hash 방식으로 암호화 -> 인코딩 O, 디코딩 X
			return new BCryptPasswordEncoder();
		}
	}

==================================================================================================================

	(5) Maven에서 dependencies 추가
		- Thymeleaf Extras Springsecurity5 에서 Gradle로 복사
		- build.gradle(:store-admin) 에 붙여넣기 후 새로고침!

		// https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity5
		implementation group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity5', version: '3.0.4.RELEASE'

	(6) main.html 추가
	
		<!DOCTYPE html>
		<html lang="kor" xmlns:th="http://www.thymeleaf.org">
		<head>
			<meta charset="UTF-8">
			<title>Title</title>
		</head>
		<body>
			<h1>MAIN PAGE</h1>

			<h1 th:text="${#authentication.name}"></h1></br>
		</body>
		</html>

=====================================================================================================
	※ PageController 수정(최신버전의 경우!!)
	
		@RequestMapping(path = {"","/main"})
		public ModelAndView main() {
			// 아래 main 에 .html 이 붙어서 Front-End 로 연결
			ModelAndView modelAndView = new ModelAndView("main");
			Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
			String currentUserName = authentication.getName();
			modelAndView.addObject("username", currentUserName);
			return modelAndView;
		}
=====================================================================================================		

6. Spring Security에서의 사용자 정보 확장하기.

	(1) storeadmin.domain.authorization.model 에 UserSession 클래스 생성
	
		@Data
		@NoArgsConstructor
		@AllArgsConstructor
		@Builder
		public class UserSession implements UserDetails {
			
			// user 관련 정보
			private Long userId;
			private String email;
			private String password;
			private StoreUserStatus status;
			private StoreUserRole role;
			private LocalDateTime registeredAt;
			private LocalDateTime unregisteredAt;
			private LocalDateTime lastLoginAt;
			
			// store 관련 정보
			private Long storeId;
			private String storeName;
			
			@Override
			public Collection<? extends GrantedAuthority> getAuthorities() {
				return List.of(new SimpleGrantedAuthority(this.role.toString()));
			}
			
			@Override
			public String getPassword() {
				return this.password;
			}
			
			@Override
			public String getUsername() {
				return this.email;
			}
			
			@Override
			public boolean isAccountNonExpired() {
				return this.status == StoreUserStatus.REGISTERED;
			}
			
			@Override
			public boolean isAccountNonLocked() {
				return this.status == StoreUserStatus.REGISTERED;
			}
			
			@Override
			public boolean isCredentialsNonExpired() {
				return this.status == StoreUserStatus.REGISTERED;
			}
			
			@Override
			public boolean isEnabled() {
				return true;
			}
		}
	
	(2) storeadmin.domain.authorization 에 AuthorizationService 수정
	
		@RequiredArgsConstructor
		@Service
		public class AuthorizationService implements UserDetailsService {
			
			private final StoreUserService storeUserService;
			private final StoreRepository storeRepository;
			
			@Override
			public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
				
				var storeUserEntity = storeUserService.getRegisterUser(username);
				var storeEntity = storeRepository.findFirstByIdAndStatusOrderByIdDesc(
					storeUserEntity.get().getStoreId(), StoreStatus.REGISTERED
				);
				
				// 1. localhost:8081에서 입력한 사용자 이메일(username)이 있다면 User 객체에 담음.
				// 2. 사용자가 입력한 암호를 가져와 UserDetails 에 있는 암호와 hash 로 비교.
				return storeUserEntity.map(it -> {
					var userSession = UserSession.builder()
						.userId(it.getId())
						.email(it.getEmail())
						.password(it.getPassword())
						.status(it.getStatus())
						.role(it.getRole())
						.registeredAt(it.getRegisteredAt())
						.unregisteredAt(it.getUnregisteredAt())
						.lastLoginAt(it.getLastLoginAt())
						
						.storeId(storeEntity.get().getId())
						.storeName(storeEntity.get().getName())
						.build();
					
					return userSession;
				})
				.orElseThrow(() -> new UsernameNotFoundException(username));
			}
		}
		
	(3) main.html 수정
	
		<!DOCTYPE html>
		<html lang="kor" xmlns:th="http://www.thymeleaf.org">
		<head>
			<meta charset="UTF-8">
			<title>Title</title>
		</head>
		<body>
			<h1>MAIN PAGE</h1>

			<h1 th:text="${#authentication.name}"></h1> </br>
			<h1 th:text="${#authentication.principal.storeName}"></h1> </br>
			<h1 th:text="${#authentication.principal.role}"></h1> </br>

			<h1 th:text="${#authentication}"></h1> </br>
		</body>
		</html>
		
		-> localhost:8081 에서 master@gmail / 1234 치면 유저정보 확인가능!!

	(4) storeadmin.domain.user.controller 에 StoreUserApiController 클래스 생성
	
		1) storeadmin.domain.user.converter 에 StoreUserConverter 추가
			- userSession에 들어있는 정보를 StoreUserResponse로 바꿔주는 역할!
		
			public StoreUserResponse toResponse(UserSession userSession){
				return StoreUserResponse.builder()
					.user(
						StoreUserResponse.UserResponse.builder()
							.id(userSession.getUserId())
							.email(userSession.getEmail())
							.status(userSession.getStatus())
							.role(userSession.getRole())
							.registeredAt(userSession.getRegisteredAt())
							.unregisteredAt(userSession.getUnregisteredAt())
							.lastLoginAt(userSession.getLastLoginAt())
							.build()
					)
					.store(
						StoreUserResponse.StoreResponse.builder()
							.id(userSession.getStoreId())
							.name(userSession.getStoreName())
							.build()
					)
					.build();
			}
	
		2) StoreUserApiController 작성
		
			@RequiredArgsConstructor
			@RestController
			@RequestMapping("/api/store-user")
			public class StoreUserApiController {

				private final StoreUserConverter storeUserConverter;

				@GetMapping("/me")
				public StoreUserResponse me(
					@Parameter(hidden = true) // swagger 에서 안보이도록
					@AuthenticationPrincipal UserSession userSession
				){
					return storeUserConverter.toResponse(userSession);
				}
			}
			
	(5) 테스트
	
		(1) 한 탭에 localhost:8081/swagger-ui/index.html 띄워놓기
		
		(2) 다른 탭에 localhost:8081 띄워놓기
		
		(3) 로그인(master@gmail / 1234) 후 swagger로 확인
		


----------------------------------------------------------------------------------------------------------------------