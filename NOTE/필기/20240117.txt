<Spring AOP PointCut 문법>

※ 참고 : https://docs.spring.io/spring-framework/docs/2.5.5/reference/aop.html

----------------------------------------------------------------------------------------------------------------------
1. 많이 쓰는 AOP 어노테이션
	(1) @target / @args / @within / @annotaion
		ex)
		- @target(com.example.annotaion.PhoneNumber)	PhoneNumber 어노테이션이 붙은 클래스
		- @args(com.example.annotation.Entity)			Entity 어노테이션이 붙은 매개변수
		- @within(com.example.annotaion.Controller)		Controller 어노테이션이 붙은 클래스
		- @annotation(com.example.annotation.Encrypt)	Encrypt 어노테이션이 붙은 메소드
		- @annotation(Encrypt)							Encrypt 어노테이션이 붙은 메소드
		
	(2) Bean
		ex)
		- bean(userService)								UserService bean의 모든 메소드

	(3) within
		ex)
		- within(com.example.dto.*)						com.example.dto 패키지의 클래스의 모든 메소드 지정
		- within(com.example.dto..*)					com.example.dto 패키지 하위의 모든 패키지의 모든 메소드 지정
		- within(com.example.dto.UserService)			com.example.dto.UserService 클래스의 모든 메소드 지정

	(4) execution
		: "execution([접근제한자-생략가능][리턴타입][패키지지정][클래스지정][메소드지정][매개변수지정])"
		  각각의 패턴은 * 으로 표현이 가능하며, ..은 0개 이상을 의미함.
		  
		[접근제한자]
		접근제한자		접근 제한자를 지정(생략가능)		example
		---------------------------------------------------------------------------------
		public			public 제한자 선택					execution(public
		private			private 제한자 선택					execution(private
		생략			생략								execution(* set*
		
		[리턴타입]
		리턴타입		리턴타입							example
		---------------------------------------------------------------------------------
		*				모든 리턴타입						execution(public *
		void			리턴 타입 void인 메소드				execution(public void
		!void			리턴 타입 void가 아닌 메소드		execution(public !void
		
		[패키지 지정]
		패키지 지정					패키지 경로					example
		--------------------------------------------------------------------------------------------------
		com.example.controller		패키지의 경로				execution(public * com.example.controller
		com.example.*				example패키지 내의			execution(public * com.example.*
									모든 조인포인트					
		com.example..				example패키지로				execution(public * com.example..
									시작하는 모든 포인트		
		com.example..impl			example패키지 하위의		execution(public * com.example..impl
									impl로 끝나는 패키지

----------------------------------------------------------------------------------------------------------------------

[Ch.10 간단한 게시판 프로젝트 개선]

1. 추상화를 통한 게시판 프로젝트 개선(1)

	- C.R.U.D + L
		1) CREATE
		2) READ
		3) UPDATE
		4) DELETE
		5) LIST

2. simpleboard.crud 패키지 생성

	(1) CRUDInterface 인터페이스 생성.

		import org.springframework.data.domain.Pageable;

		public interface CRUDInterface<DTO> {

			DTO create(DTO dto);

			Optional<DTO> read(Long id);

			DTO update(DTO dto);

			void delete(Long id);

			Api<List<DTO>> list(Pageable pageable);
		}
	
	(2) CRUDAbstractService 클래스 생성.
	
		/*
		* dto -> entity -> dto
		* 코드 -> 메소드 구현(alt+shift+P)
		* */
		public abstract class CRUDAbstractService<DTO, ENTITY> implements CRUDInterface<DTO> {

			@Override
			public DTO create(DTO dto) {

				// dto -> entity

				// entity -> save

				// save -> dto로 바꿔서 리턴

				return null;
			}

			@Override
			public Optional<DTO> read(Long id) {
				return Optional.empty();
			}

			@Override
			public DTO update(DTO dto) {
				return null;
			}

			@Override
			public void delete(Long id) {

			}

			@Override
			public Api<List<DTO>> list(Pageable pageable) {
				return null;
			}
		}
		
	(3) Converter 인터페이스 생성(위의 create메소드 기능 구현)
	
		public interface Converter<DTO, ENTITY> {

			DTO toDto(ENTITY entity);

			ENTITY toEntity(DTO dto);
		}
		
	(4) CRUDAbstractService 클래스에 추가
		
		public abstract class CRUDAbstractService<DTO, ENTITY> implements CRUDInterface<DTO> {

			@Autowired(required = false)
			private JpaRepository<ENTITY, Long> jpaRepository;

			@Autowired(required = false)
			private Converter<DTO, ENTITY> converter;

			@Override
			public DTO create(DTO dto) {

				// dto -> entity
				var entity = converter.toEntity(dto);

				// entity -> save
				jpaRepository.save(entity);

				// save -> dto로 바꿔서 리턴
				var returnDto = converter.toDto(entity);

				return returnDto;
			}

			@Override
			public Optional<DTO> read(Long id) {
				var optionalEntity = jpaRepository.findById(id);

				var dto = optionalEntity.map(it -> {
					return converter.toDto(it);
				}).orElseGet(()->null);

				return Optional.ofNullable(dto);
			}

			@Override
			public DTO update(DTO dto) {
				var entity = converter.toEntity(dto);
				jpaRepository.save(entity);
				var returnDto = converter.toDto(entity);

				return returnDto;
			}

			@Override
			public void delete(Long id) {
				jpaRepository.deleteById(id);
			}

			@Override
			public Api<List<DTO>> list(Pageable pageable) {
				var list = jpaRepository.findAll(pageable);

				var pagination = Pagination.builder()
						.page(list.getNumber())
						.size(list.getSize())
						.currentElements(list.getNumberOfElements())
						.totalElements(list.getTotalElements())
						.totalPage(list.getTotalPages())
						.build();

				var dtoList = list.stream().map(it -> {
					return converter.toDto(it);
				}).collect(Collectors.toList());

				var response = Api.<List<DTO>>builder()
						.body(dtoList)
						.pagination(pagination)
						.build();

				return response;
			}
		}
		
	(5) CRUDAbstractApiController 클래스 생성.
		- 최초 alt+shift+P로 메소드 자동생성

		public abstract class CRUDAbstractApiController<DTO, ENTITY> implements CRUDInterface<DTO> {

			@Autowired(required = false)
			private CRUDAbstractService<DTO, ENTITY> crudAbstractService;

			@PostMapping("")
			@Override
			public DTO create(
					@Valid
					@RequestBody
					DTO dto
			) {
				return crudAbstractService.create(dto);
			}

			@GetMapping("/id/{id}")
			@Override
			public Optional<DTO> read(
					@PathVariable
					Long id
			) {
				return crudAbstractService.read(id);
			}

			@PutMapping("")
			@Override
			public DTO update(
					@Valid
					@RequestBody
					DTO dto
			) {
				return crudAbstractService.update(dto);
			}

			@DeleteMapping("")
			@Override
			public void delete(
					@PathVariable
					Long id
			) {
				crudAbstractService.delete(id);
			}

			@GetMapping("/all")
			@Override
			public Api<List<DTO>> list(
					@PageableDefault
					Pageable pageable
			) {
				return crudAbstractService.list(pageable);
			}
		}
		
	(6) 적용
		1) reply.model 패키지에 ReplyDto 클래스 생성
			- Entity에서 View에 관련한 로직을 짜면 안되기 때문에..
			
			@Getter
			@Setter
			@NoArgsConstructor
			@AllArgsConstructor
			@ToString
			@Builder
			@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
			public class ReplyDto {

				private Long id;

				private Long postId;

				private String userName;

				private String password;

				private String status;

				private String title;

				private String content;

				private LocalDateTime repliedAt;
			}
			
		2) reply.service 패키지에 ReplyConverter 클래스 추가
			- Entity와 Dto는 변환이 가능해야 하므로 Converter 추가

			@Service
			@RequiredArgsConstructor
			public class ReplyConverter implements Converter<ReplyDto, ReplyEntity> {

				private final PostRepository postRepository;
				@Override
				public ReplyDto toDto(ReplyEntity replyEntity) {
					return ReplyDto.builder()
							.id(replyEntity.getId())
							.postId(replyEntity.getPost().getId())
							.status(replyEntity.getStatus())
							.title(replyEntity.getTitle())
							.content(replyEntity.getContent())
							.userName(replyEntity.getUserName())
							.password(replyEntity.getPassword())
							.repliedAt(replyEntity.getRepliedAt())
							.build();
				}

				@Override
				public ReplyEntity toEntity(ReplyDto replyDto) {
					var postEntity = postRepository.findById(replyDto.getPostId());

					return ReplyEntity.builder()
							.id(replyDto.getId()) // null이면 save, not null이면 update
							.post(postEntity.orElseGet(()->null))
							.status((replyDto.getStatus() != null) ? replyDto.getStatus() : "REGISTERED")
							.title(replyDto.getTitle())
							.content(replyDto.getContent())
							.userName(replyDto.getUserName())
							.password(replyDto.getPassword())
							.repliedAt((replyDto.getRepliedAt() != null) ? replyDto.getRepliedAt() : LocalDateTime.now())
							.build();
				}
			}

		3) ReplyApiController, ReplyService 수정
			- 내용은 전부 주석처리, CRUDAbstractApiController 및 CRUDAbstractService 상속
		
			public class ReplyApiController extends CRUDAbstractApiController<ReplyDto, ReplyEntity> {

			//    private final ReplyService replyService;
			//
			//    @PostMapping("")
			//    public ReplyEntity create(
			//            @Valid
			//            @RequestBody ReplyRequest replyRequest
			//    ) {
			//        return replyService.create(replyRequest);
			//    }
			}
			--------------------------------------------------------------------------------------------
			
			@Service
			@RequiredArgsConstructor
			public class ReplyService extends CRUDAbstractService<ReplyDto, ReplyEntity> {

			//    private final ReplyRepository replyRepository;
			//    private final PostRepository postRepository;
			//
			//    public ReplyEntity create(
			//            ReplyRequest replyRequest
			//    ){
			//        var optionalPostEntity = postRepository.findById(replyRequest.getPostId());
			//
			//        if(optionalPostEntity.isEmpty()){
			//            throw new RuntimeException("게시물이 존재하지 않습니다 : " + replyRequest.getPostId());
			//        }
			//        var entity = ReplyEntity.builder()
			//                .post(optionalPostEntity.get())
			//                .userName(replyRequest.getUserName())
			//                .password(replyRequest.getPassword())
			//                .status("REGISTERED")
			//                .title(replyRequest.getTitle())
			//                .content(replyRequest.getContent())
			//                .repliedAt(LocalDateTime.now())
			//                .build();
			//
			//        return replyRepository.save(entity);
			//    }
			//
			//    public List<ReplyEntity> findAllByPostId(Long postId) {
			//        return replyRepository.findAllByPostIdAndStatusOrderByIdDesc(postId, "REGISTERED");
			//    }
			}


----------------------------------------------------------------------------------------------------------------------