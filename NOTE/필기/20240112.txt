[CH.08 간단한 게시판 프로젝트]

※ Tips
	- 깃허브로 내려받아 인텔리제이로 프로젝트 시작할 때 프로젝트 종료 후 
	  다시 프로젝트 시작해서 실행해야 함.(gradle 재설정)
	  
※ TODO
	- BoardEntity에 @Where, @OrderBy deprecate 된 거 해결하기(최신 코드로..)

----------------------------------------------------------------------------------------------------------
1. 답변 작성
	- reply에 controller, model, service 패키지 생성.
	
	(1) reply.controller 패키지에 ReplyApiController 생성
		
		@RestController
		@RequestMapping("/api/reply")
		@RequiredArgsConstructor
		public class ReplyApiController {

		}
		
	(2) reply.service 패키지에 ReplyService 생성
	
		@Service
		@RequiredArgsConstructor
		public class ReplyService {

			private final ReplyRepository replyRepository;

			public ReplyEntity create(
					ReplyRequest replyRequest
			){
				var entity = ReplyEntity.builder()
						.postId(replyRequest.getPostId())
						.userName(replyRequest.getUserName())
						.password(replyRequest.getPassword())
						.status("REGISTERED")
						.title(replyRequest.getTitle())
						.content(replyRequest.getContent())
						.repliedAt(LocalDateTime.now())
						.build();

				return replyRepository.save(entity);
			}
		}

	(3) reply.model 패키지에 RepyRequest 생성
	
		@Getter
		@Setter
		@ToString
		@NoArgsConstructor
		@AllArgsConstructor
		@Builder
		@JsonNaming(value = PropertyNamingStrategies.SnakeCaseStrategy.class)
		public class ReplyRequest {

			@NotNull
			private Long postId;

			@NotBlank
			private String userName;

			@NotBlank
			@Size(min = 4, max = 4)
			private String password;

			@NotBlank
			private String title;
			
			@NotBlank
			private String content;

		}

	(4) TAT 에서 테스트
		1) (POST)
			http://localhost:8080/api/reply
		2) 
		{
			"post_id" : 1,
			"user_name" : "관리자",
			"password" : "1111",
			"title" : "답변 드립니다.",
			"content" : "고객님께서 주문하신 물품은 블라블라~~"
		}


2. 답변 내용 UI에 보여주기
	
	(1) ReplyService, ReplyRepository 추가, PostService, PostEntity 추가
	
		-----------------------------------------------------------------------------------------
		<ReplyRepository>
		
		public interface ReplyRepository extends JpaRepository<ReplyEntity, Long> {

			// select * from reply where post_id = ? and status = ? order by desc
			List<ReplyEntity> findAllByPostIdAndStatusOrderByIdDesc(Long postId, String status);
		}
		
		-----------------------------------------------------------------------------------------
		<ReplyService>
		
		public List<ReplyEntity> findAllByPostId(Long postId) {
			return replyRepository.findAllByPostIdAndStatusOrderByIdDesc(postId, "REGISTERED");
		}

		-----------------------------------------------------------------------------------------
		<PostService>
		
		private final ReplyService replyService;
		.
		.
		public PostEntity view(PostViewRequest postViewRequest) {
			// 등록된 것만 보여지도록 수정
			return postRepository.findFirstByIdAndStatusOrderByIdDesc(postViewRequest.getPostId(), "REGISTERED")
				.map(it -> {
					// entity 존재
					if(!it.getPassword().equals(postViewRequest.getPassword())){
						var format = "패스워드가 맞지 않습니다 %s vs %s";
						throw new RuntimeException(String.format(format, it.getPassword(), postViewRequest.getPassword()));
					}

					// 답변글도 같이 적용
					var replyList = replyService.findAllByPostId(it.getId());
					it.setReplyList(replyList);

					return it;

				}).orElseThrow(
						() -> {
							return new RuntimeException("해당 게시글이 존재하지 않습니다 : " + postViewRequest.getPostId());
						});
		}
		
		
		-----------------------------------------------------------------------------------------
		<PostEntity>
		
		@Transient // DB에서 컬럼으로 인식하지 않도록
		@Builder.Default
		private List<ReplyEntity> replyList = List.of();
		
		-----------------------------------------------------------------------------------------
		
	(2) TAT의 simple_board
		1) 게시글 작성으로 새 게시글 등록(기존꺼 지워서 post_id는 2임)
			{
			  "user_name" : "홍길동",
			  "password" : "1111",
			  "email" : "hong@gmail.com",
			  "title" : "문의드립니다.",
			  "content" : "물건을 구매했는데, 배송이 오지 않습니다."
			}
		2) 답변 작성
			- 1번 답변
				{
				  "post_id" : 2,
				  "user_name" : "관리자",
				  "password" : "1111",
				  "title" : "답변 드립니다.",
				  "content" : "고객님께서 주문하신 물품은 서피스입니다."
				}
			-2번 답변
				{
				  "post_id" : 2,
				  "user_name" : "관리자",
				  "password" : "1111",
				  "title" : "재답변 드립니다.",
				  "content" : "고객님께서 주문하신 물품은 현재 배송중입니다."
				}
		3) 게시글 열람(답변 2개 확인!!)
			{
			  "post_id" : "2",
			  "password" : "1111"
			}


3. JPA 연관관계 설정
	- board 테이블(1) -- post 테이블(N)
	- post 테이블(1) -- reply 테이블(N)
	-> 위의 연관관계를 좀더 쉽게 연결하기 위해 JPA 사용.
	
	(1) BoardEntity 추가
		
		private String status;

		// 1(board) : N(post)의 관계 설정
		@OneToMany(
				mappedBy = "board"
		)
		@Builder.Default
		private List<PostEntity> postList = List.of();
		
	(2) PostEntity 수정

		@GeneratedValue(strategy = GenerationType.IDENTITY)
		private Long id;
		
		// N(post) : 1(board) 의 관계 설정
		@ManyToOne
		@JsonIgnore // 각 Entity의 board관련 List를 돌면서 무한반복 되는걸 방지
		@ToString.Exclude // 위와 같이 ToString을 돌면서 무한반복 되는걸 방지
		private BoardEntity board; // Long boardId에서 수정

		private String userName;

		private String password;
		
	(3) PostRequest 추가
	
		public class PostRequest {

			private Long boardId = 1L;

			@NotBlank
			private String userName;
			
	(4) PostService 수정, 추가
	
		private final PostRepository postRepository;
		private final ReplyService replyService;
		private final BoardRepository boardRepository;

		public PostEntity create(
				PostRequest postRequest
		){
			var boardEntity = boardRepository.findById(postRequest.getBoardId()).get(); // 임시 고정
			var entity = PostEntity.builder()
					.board(boardEntity)
					.userName(postRequest.getUserName())
					.password(postRequest.getPassword())
					.email(postRequest.getEmail())
					.status("REGISTERED")
					.title(postRequest.getTitle())
					.content(postRequest.getContent())
					.postedAt(LocalDateTime.now())
					.build();

			return postRepository.save(entity);
		}

	(5) BoardApiController 추가

		@GetMapping("/id/{id}")
		public BoardEntity view(
				@PathVariable Long id
		) {
			return boardService.view(id); // alt+enter 로 BoardService에 생성
		}
		
	(6) BoardService 추가

		public BoardEntity view(Long id) {
			return boardRepository.findById(id).get();
		}

	(7) TAT에서 테스트
		1) (GET)
			http://localhost:8080/api/board/id/1
	
	
	(8) board.model, post.model 패키지에 BoardDto, PostDto 클래스 생성
		- 위의 무한반복 같은 문제를 해결하기 위해 Dto로 따로 빼서 관리.
	
		---------------------------------------------------------------------------
		@Getter
		@Setter
		@ToString
		@Builder
		@NoArgsConstructor
		@AllArgsConstructor
		@JsonNaming(value = PropertyNamingStrategies.SnakeCaseStrategy.class)
		public class BoardDto {

			private Long id;
			private String boardName;
			private String status;

			// 1(board) : N(post)의 관계 설정
			@Builder.Default
			private List<PostDto> postList = List.of();
		}

		---------------------------------------------------------------------------
		@Getter
		@Setter
		@ToString
		@Builder
		@NoArgsConstructor
		@AllArgsConstructor
		@JsonNaming(value = PropertyNamingStrategies.SnakeCaseStrategy.class)
		public class PostDto {

			private Long id;
			private Long boardId;
			private String userName;
			private String password;
			private String email;
			private String status;
			private String title;
			private String content;
			private LocalDateTime postedAt;
		}

	(9) 위의 Dto들을 변환시켜주는 클래스 생성
		- board.service 패키지에 BoardConverter 클래스 생성
		- post.service 패키지에 PostConverter 클래스 생성
		
		@Service
		@RequiredArgsConstructor
		public class BoardConverter {

			private final PostConverter postConverter;

			// boardEntity가 들어오면 BoardDto로 변환
			public BoardDto toDto(BoardEntity boardEntity) {
			
				/*
				- 아래 람다식의 원본
				var postList = boardEntity.getPostList()
					.stream()
					.map(postEntity -> {
						return postConverter.toDto(postEntity);
					}).collect(Collectors.toList());
				*/

				var postList = boardEntity.getPostList()
						.stream()
						.map(postConverter::toDto)
						.collect(Collectors.toList());

				return BoardDto.builder()
						.id(boardEntity.getId())
						.boardName(boardEntity.getBoardName())
						.status(boardEntity.getStatus())
						.postList(postList)
						.build();
			}
		}
		
		--------------------------------------------------------------------
		@Service
		public class PostConverter {

			public PostDto toDto(PostEntity postEntity) {
				return PostDto.builder()
						.id(postEntity.getId())
						.userName(postEntity.getUserName())
						.status(postEntity.getStatus())
						.email(postEntity.getEmail())
						.password(postEntity.getPassword())
						.title(postEntity.getTitle())
						.content(postEntity.getContent())
						.postedAt(postEntity.getPostedAt())
						.boardId(postEntity.getBoard().getId())
						.build();
			}
		}		
		
	(10) BoardService, BoardApiController 수정
		
		public class BoardService {

			private final BoardRepository boardRepository;
			private final BoardConverter boardConverter;

			public BoardDto create(
					BoardRequest boardRequest
			){
				var entity = BoardEntity.builder()
						.boardName(boardRequest.getBoardName())
						.status("REGISTERED")
						.build();

				var saveEntity = boardRepository.save(entity);
				return boardConverter.toDto(saveEntity);
			}

			public BoardDto view(Long id) {
				var entity = boardRepository.findById(id).get();
				return boardConverter.toDto(entity);
			}
		}
		
		--------------------------------------------------------------------
		public class BoardApiController {

			private final BoardService boardService;

			@PostMapping("")
			public BoardDto create(
				@Valid
				@RequestBody BoardRequest boardRequest
			){
				return boardService.create(boardRequest);
			}

			@GetMapping("/id/{id}")
			public BoardDto view(
					@PathVariable Long id
			) {
				var entity = boardService.view(id);
				log.info("result : {}", entity);
				return entity;
			}
		}

	(11) TAT에서 테스트
		1) (GET)
			http://localhost:8080/api/board/id/1
		-> post_list아래 2개의 답변 확인!!


	(12) PostEntity 수정
		
		private LocalDateTime postedAt;

		@OneToMany(
				mappedBy = "post"
		)
		private List<ReplyEntity> replyList = new ArrayList<>();
		
	
	(13) ReplyEntity 수정
	
		@Id
		@GeneratedValue(strategy = GenerationType.IDENTITY)
		private Long id;
	
		@ManyToOne
		@ToString.Exclude
		@JsonIgnore
		private PostEntity post; // post라고 해야 _id가 붙어서 post_id가 됨

		private String userName;
		
	(14) ReplyService 수정
		- PostService에도 직접 get()으로 받지 않게 수정해보기
	
		public class ReplyService {

			private final ReplyRepository replyRepository;
			private final PostRepository postRepository;

			public ReplyEntity create(
					ReplyRequest replyRequest
			){
				var optionalPostEntity = postRepository.findById(replyRequest.getPostId());

				if(optionalPostEntity.isEmpty()){
					throw new RuntimeException("게시물이 존재하지 않습니다 : " + replyRequest.getPostId());
				}
				var entity = ReplyEntity.builder()
						.post(optionalPostEntity.get())
						.userName(replyRequest.getUserName())
						.password(replyRequest.getPassword())
						.status("REGISTERED")
						.title(replyRequest.getTitle())
						.content(replyRequest.getContent())
						.repliedAt(LocalDateTime.now())
						.build();

				return replyRepository.save(entity);
			}
			
	(15) TAT에서 삭제한 글(UNREGISTERED) 안보이게
		
		1) BoardEntity 추가

			// 1(board) : N(post)의 관계 설정
			@OneToMany(
					mappedBy = "boardEntity"
			)
			@Builder.Default
			@Where(clause = "status = 'REGISTERED'")
			@org.hibernate.annotations.OrderBy(clause = "id desc")
			private List<PostEntity> postList = List.of();


4. Pagenation

	(1) simpleboard에 common 패키지 생성 후 API, Pagination 클래스 생성
	
		1) API
		
			@Getter
			@Setter
			@ToString
			@NoArgsConstructor
			@AllArgsConstructor
			@Builder
			public class API<T> {

				private T body;

				private Pagination pagination;
			}
			
		2) Pagination
		
			@Getter
			@Setter
			@ToString
			@NoArgsConstructor
			@AllArgsConstructor
			@Builder
			public class Pagination {
				
				// 현재 페이지
				private Integer page;

				// 총 사이즈가 몇개가 들어있는지
				private Integer size;

				// 현재 가지고 있는 엘리먼트가 몇개가 있는지
				private Integer currentElements;

				// 토탈 페이지
				private Integer totalPage;

				// 전체 엘리먼트가 몇 개가 있는지
				private Long totalElements;
			}
		
	(2) PostApiController 추가
	
		import org.springframework.data.domain.Pageable;
		
		@GetMapping("/all")
		public Api<List<PostEntity>> list(
			@PageableDefault(page = 0, size = 10, sort = "id", direction = Sort.Direction.DESC)
			Pageable pageable
		){
			return postService.all(pageable);
		}

		-> all(pageable)에 Alt+Enter -> Ctrl+클릭 -> PostService로 이동
		
	(3) PostService 추가
	
		import org.springframework.data.domain.Pageable;
		
		public Api<List<PostEntity>> all(Pageable pageable) {
			var list = postRepository.findAll(pageable);

			var pagination = Pagination.builder()
					.page(list.getNumber())
					.size(list.getSize())
					.currentElements(list.getNumberOfElements())
					.totalElements(list.getTotalElements())
					.totalPage(list.getTotalPages())
					.build();

			var response = Api.<List<PostEntity>>builder()
					.body(list.toList())
					.pagination(pagination)
					.build();

			return response;
		}
		
	(4) TAT에서 테스트
		1) GET, http://localhost:8080/api/post/all
		2) Query Parameters에 2개 추가
			- page = 0
			- size = 5
		-> 게시글 작성에서 게시글을 12개 정도 만들어서 테스트
		-> page와 size를 바꿔서 테스트(0/10, 1/10)

----------------------------------------------------------------------------------------------------------
[Ch.10 Spring Boot Web 활용]

<filter 프로젝트>
1. Lombok, Spring Web

----------------------------------------------------------------------------------------------------------
1. filter.controller, filter.model 패키지에 UserApiController, UserRequest 클래스 생성

	(1) UserApiController
		
		@Slf4j
		@RestController
		@RequestMapping("/api/user")
		public class UserApiController {

			@PostMapping("")
			public void register(
				@RequestBody
				UserRequest userRequest
			) {
				log.info("{}", userRequest);
			}
		}
		
	(2) UserRequest
		
		@Getter
		@Setter
		@NoArgsConstructor
		@AllArgsConstructor
		@Builder
		@ToString
		@JsonNaming(value = PropertyNamingStrategies.SnakeCaseStrategy.class)
		public class UserRequest {

			private String name;

			private String phoneNumber;

			private String email;

			private Integer age;
		}

	(3) TAT에서 새 filter 프로젝트 생성 후 테스트
		- UserRequest (GET)
		- http://localhost:8080/api/user
		- body
			{
				"user_name" : "홍길동",
				"phone_number" : "0101111-2222",
				"age" : 100,
				"email" : "hong@gmail"
			}
		-> 위처럼 보내면 name=null이 나옴.
		즉, 클라이언트 측에서 보낸 데이터는 Controller에 @RequestBody를 거쳐들어오기 때문에
		서버 측에선 잘못된 데이터라서 null.
		-> 그래서 서버로 들어오기 전 FILTER 영역에 있는 데이터를 확인하기 위해 Controller에서
		HttpEntity를 이용해 데이터 확인.
		
	(4) UserApiController
		
		public class UserApiController {

			@PostMapping("")
			public void register(
		//        @RequestBody
		//        UserRequest userRequest
					HttpEntity http
			) {
				log.info("{}", http.getBody());
			}
		}
		
		-----------------------------------------------------------------------------
		다시 아래처럼 돌리고 확인.
		@PostMapping("")
		public UserRequest register(
			@RequestBody
			UserRequest userRequest
		) {
			log.info("{}", userRequest);
			return userRequest;
		}
		
		-----------------------------------------------------------------------------
	
	(5) filter.filter 패키지 생성 후 LoggerFilter 클래스 생성
		
		// alt+enter로 메소드 생성 -> doFilter 생성
		
		import jakarta.servlet.*;
		
		@Slf4j
		@Component
		public class LoggerFilter implements Filter {
			@Override
			public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {

				// 진입 전
				log.info(">>>>>> 진입 ");
				chain.doFilter(request, response);

				log.info("<<<<<< 리턴 ");
				// 진입 후

			}
		}
		
		-----------------------------------------------------------------------------
		
		@Override
		public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {

			// 진입 전
			log.info(">>>>>> 진입 ");
			// ContentCachingRequestWrapper
			//  - 리더로 읽을 때 따로 내부에다 ContentCaching byte array에 해당 내용을 담아 놓음
			var req = new ContentCachingRequestWrapper((HttpServletRequest) request);
			var res = new ContentCachingResponseWrapper((HttpServletResponse) response);

			chain.doFilter(req, res);

			var reqJson = new String(req.getContentAsByteArray());
			log.info("req : {}", reqJson);

			var resJson = new String(res.getContentAsByteArray());
			log.info("res : {}", reqJson);

			log.info("<<<<<< 리턴 ");
			// 진입 후

			// TAT에서 body가 비는 것을 방지하기 위해 반드시 마지막에 호출
			res.copyBodyToResponse();
		}
		
		-> 이렇게 수정 후 TAT에서 실행했을 때 Body에도 출력되고, 인텔리제이 콘솔에 req, res에 각각
			내용이 출력됨!



2. Interceptor
	- filter와 서버 사이에 존재.
	- filter.interceptor 패키지 생성 후 OpenApiInterceptor 클래스 생성
	- alt+shift+P 눌러서 3개 메소드 생성
	
	(1) OpenApiInterceptor
		
		@Slf4j
		@Component
		public class OpenApiInterceptor implements HandlerInterceptor {

			@Override
			public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
				log.info("pre handle");
				// controller 전달, false는 전달 안됨
				return true;
			}

			@Override
			public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
				log.info("post handle");
		//        HandlerInterceptor.super.postHandle(request, response, handler, modelAndView);
			}

			@Override
			public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
				log.info("after completion");
		//        HandlerInterceptor.super.afterCompletion(request, response, handler, ex);
			}
		}
	
	
	(2) filter.config 패키지 생성 후 WebConfig 클래스 생성
		- 위의 interceptor를 동작시키기 위한 config가 필요.
		
		@Configuration
		public class WebConfig implements WebMvcConfigurer {

			@Autowired
			private OpenApiInterceptor openApiInterceptor;

			@Override
			public void addInterceptors(InterceptorRegistry registry) {
				// 들어오는 모든 주소를 매핑하겠다
				registry.addInterceptor(openApiInterceptor)
						.addPathPatterns("/**");
			}
		}
		
		-> TAT에서 테스트 후 인텔리제이 콘솔에서 로그 확인.
			(UserRequest)
			
	(3) interceptor 패키지 하위에 OpenApi 인터페이스 생성.
	
		@Target(value = {ElementType.METHOD, ElementType.TYPE})
		@Retention(RetentionPolicy.RUNTIME)
		public @interface OpenApi {

		}
		
	(4) 위의 OpenApi 달고 안달고 차이 확인
		- UserApiController 수정, 추가
		
		@OpenApi
		@PostMapping("")
		public UserRequest register(
			@RequestBody
			UserRequest userRequest
		) {
			log.info("{}", userRequest);
			return userRequest;
		}

		@GetMapping("/hello")
		public void hello(){
			log.info("hello");
		}

	(5) OpenApiInterceptor 추가
	
		@Override
		public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
			log.info("pre handle");
			// controller 전달, false는 전달 안됨

			// handler 형변환
			var handlerMethod = (HandlerMethod) handler;

			var methodLevel = handlerMethod.getMethodAnnotation(OpenApi.class);
			if (methodLevel != null) {
				log.info("method level");
				return true;
			}

			var classLevel = handlerMethod.getBeanType().getAnnotation(OpenApi.class);
			if (classLevel != null) {
				log.info("class level");
				return true;
			}

			log.info("open api 아닙니다 : {}", request.getRequestURI());
			return false;
		}
		
		-> UserApiController 클래스에 @OpenApi를 직접 달아주면 하위의 모든 메소드가 적용되므로
		TAT에서 http://localhost:8080/api/user/hello 에서 실행을 해도 interceptor에 들어감














----------------------------------------------------------------------------------------------------------