[Ch.02 실전 프로젝트 1] - 프로젝트 베이스 개발

※ 프로젝트 세팅
	(1) Project : Gradle - Groovy
	(2) Language : Java 11
	(3) Spring Boot : 2.7.9
	(4) Metadata : Group - com.delivery / Arifact - service
	(5) Dependencies : 
	(6) DB Library : JPA
	(7) DB Server : Mysql 8.X

※ DBeaver 에서 delivery 데이터베이스 생성(utf8mb4 / utf8mb4_bin)
	
※ Spring Initializr 사용하지 않고 인텔리제이로만 세팅할 때
	(1) 새 프로젝트
		- 이름 : service
		- Java / Gradle / Java 11버전 / Groovy
		- 그룹ID : org.delivery
		- 아티팩트ID : service
	
	(2) 멀티 모듈 세팅(현재 프로젝트 내에 다른 프로젝트를 넣을 수 있음)
		- API 모듈, DB 모듈 2개로 분리
		
		1) 최상단 프로젝트 우클릭 -> 새로 만들기 -> 모듈
			- 이름 : api -> 생성
			- 이름 : db -> 생성
		2) 최상단 프로젝트의 src는 사용X -> 삭제
		
※ 터미널로 빌드 패키징 하기.
	(1) alt+F12 로 터미널 열기
	
	(2) 최상단 디렉토리(gradlew 파일 있는 곳) 에서 '.\gradlew build' 로 빌드 실행
	
	(3) 빌드 클린 방법
		1) GUI : 오른쪽 그래들 아이콘 -> Tasks -> build -> clean 더블클릭
		2) Terminal : gradlew 있는 위치에서 '.\gradlew clean'
		
	(3) 실행시킬 jar 파일로 이동해서 'java -jar .\api-1.0-SNAPSHOT.jar' 로 실행
		


----------------------------------------------------------------------------------------------------------------------

1. Gradle 멀티 모듈 설정 기본

	(1) db 패키지에 java폴더에 UserDto 클래스 생성.

	(2) build.gradle(:api) 수정
		- api 프로젝트에서 db 프로젝트를 쓸 수 있도록 설정
		
		dependencies {
			implementation project(':db')
			testImplementation platform('org.junit:junit-bom:5.9.1')
			testImplementation 'org.junit.jupiter:junit-jupiter'
		}
		
		-> 돌고래 모양 클릭(새로고침)

	(3) build.gradle(:service) 수정(전부 지우고 아래처럼)

		plugins {
			id 'java'
		}

		allprojects {
			repositories {
				mavenCentral()
			}
		}
		
		-> 돌고래 모양 클릭(새로고침)

	(4) api 프로젝트 java 패키지에 Main 클래스 생성.

		public class Main {
			public static void main(String args[]) {
				UserDto userDto = new UserDto();
			}
		}

	(5) db 프로젝트 java아래 org.delivery.db 패키지 생성.
		- UserDto 파일을 위 패키지로 이동(드래그)

2. 스프링 프로젝트로 변경

	(1) build.gradle(service) 수정
		plugins {
			id 'java'
			id 'org.springframework.boot' version '2.7.9'
			id 'io.spring.dependency-management' version '1.0.15.RELEASE'
		}

		allprojects {
			repositories {
				mavenCentral()
			}
		}

		bootJar{
			enabled = false
		}

		jar{
			enabled = false
		}
		
		-> 돌고래 모양 클릭(새로고침)
		
	(2) build.gradle(:api) 수정

		plugins {
			id 'java'
			id 'org.springframework.boot'
			id 'io.spring.dependency-management'
		}

		group = 'org.delivery'
		version = '1.0-SNAPSHOT'
		java {
			sourceCompatibility = '11'
		}

		configurations {
			compileOnly {
				extendsFrom annotationProcessor
			}
		}

		repositories {
			mavenCentral()
		}

		dependencies {
			compileOnly 'org.projectlombok:lombok'
			annotationProcessor 'org.projectlombok:lombok'

			implementation 'org.springframework.boot:spring-boot-starter-web'
			testImplementation 'org.springframework.boot:spring-boot-starter-test'

			implementation project(':db')
			
			// jpa
			implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		}

		test {
			useJUnitPlatform()
		}
		
		-> 돌고래 모양 클릭(새로고침)
		
	(3) api 프로젝트
		1) java폴더 하위에 Main 클래스 삭제.
		
		2) java폴더 하위에 org.delivery.api 패키지 생성 후 ApiApplication 클래스 생성
		
			@SpringBootApplication
			public class ApiApplication {
				
				public static void main(String arg[]) {
					SpringApplication.run(ApiApplication.class, arg);
				}
			}

			-> 실행시켜서 뜨면 OK!
			
	(4) build.gradle(:db) 수정

		plugins {
			id 'java'
			id 'org.springframework.boot'
			id 'io.spring.dependency-management'
		}

		group = 'org.delivery'
		version = '1.0-SNAPSHOT'
		java {
			sourceCompatibility = '11'
		}

		configurations {
			compileOnly {
				extendsFrom annotationProcessor
			}
		}

		repositories {
			mavenCentral()
		}

		dependencies {
			compileOnly 'org.projectlombok:lombok'
			annotationProcessor 'org.projectlombok:lombok'

			implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
			runtimeOnly 'com.mysql:mysql-connector-j'
		}

		test {
			useJUnitPlatform()
		}
		
	(5) api 프로젝트 resources 폴더 아래 application.yaml 파일 생성(DB 연결)

		spring:
		  jpa:
			show-sql: true
			properties:
			  format_sql: true
			  dialect: org.hibernate.dialect.MySQL8Dialect
			hibernate:
			  ddl-auto: validate
		  datasource:
			url: jdbc:mysql://localhost:3306/delivery?useSSL=false&useUnicode=true&allowPublicKeyRetrieval=true
			driver-class-name: com.mysql.cj.jdbc.Driver
			username: root
			password: admin123!

	(6) api 프로젝트의 build.gradle 에 추가
	
		-- api프로젝트는 Spring Boot로 실행될 거기 때문에 bootJar는 true, jar는 false
	
		test {
			useJUnitPlatform()
		}

		bootJar{
			enabled = true
		}

		jar{
			enabled = false
		}
		
		※ Build 클린 방법
			1) 우측 Gradle 아이콘 -> Tasks -> build -> clean 더블 클릭
			2) service 위치에서 터미널(alt+F12) -> ./gradlew clean
	
	(7) db 프로젝트의 build.gradle 에 추가

		-- db 프로젝트는 Spring Boot로 실행시키지 않음.
		
		test {
			useJUnitPlatform()
		}

		bootJar{
			enabled = false
		}

		jar{
			enabled = true
		}
		
		-> 새로고침 후
		
		-> service 위치에서 터미널로 ./gradlew clean -> ./gradlew build
		-> api는 스프링jar 생성(api.build.libs), db는 일반jar 생성(db.build.libs)


3. 실제 코딩
	
	(1) db 프로젝트
		1) org.delivery.db 에 account 패키지 생성
		
		2) delivery.db 에 BaseEntity 클래스 생성
		
			@Data
			@SuperBuilder
			@MappedSuperclass
			public class BaseEntity {
				
				@Id
				@GeneratedValue(strategy = GenerationType.IDENTITY)
				private Long id;
			}
			
		3) db.account 패키지에 AccountEntity 클래스 생성
		
			@SuperBuilder // 부모가 가지고 있는 변수도 builder() 로 지정 가능
			@EqualsAndHashCode(callSuper = true) // 부모에 있는 값까지 포함해서 비교
			@Data
			@Entity
			@Table(name = "account")
			public class AccountEntity extends BaseEntity {
				
			}
		
		4) db.account 패키지에 AccountRepository 인터페이스 생성
		
			public interface AccountRepository extends JpaRepository<AccountEntity, Long> {
				
			}
			
	(2) api 프로젝트
		1) org.delivery.api 에 account 패키지 생성
		
		2) api.account 패키지에 AccountApiController 클래스 생성
		
	(3) api 프로젝트에 api.config.jpa 패키지 생성
		- 스프링에서는 자신과 동일한 경로에 있는 패키지에 있는 여러 어노테이션들이 있는 
			요소들을 자신의 bean으로 등록.
		- 그런데, api와 db의 패키지가 달라서 db 프로젝트에 있는 bean을 가져오지 못함.
		- 그래서 db 프로젝트에 있는 bean을 등록할 수 있도록 config 설정을 해야함.
		
		1) api.config.jpa 패키지에 JpaConfig 클래스 생성
			@Configuration
			@EntityScan(basePackages = "org.delivery.db")
			@EnableJpaRepositories(basePackages = "org.delivery.db")
			public class JpaConfig {
				
			}
			
			-> 브라우저에 localhost:8080/api/account 하면 콘솔에 insert 메세지 출력.
			-> dbeaver에서 select 해보면 데이터 1개 확인 가능!!
			

4. API 기본 설정 추가

	(1) Object Mapper 커스텀
		
		1) api.account.model 패키지 생성 후 AccountMeResponse 클래스 생성
		
			@Data
			@Builder
			public class AccountMeResponse {
				
				private String email;
				
				private String name;
				
				private LocalDateTime registeredAt;
			}
			
		2) AccountApiController 수정
		
			public class AccountApiController {
				
				private final AccountRepository accountRepository;
				
				@GetMapping("/me")
				public AccountMeResponse me(){
					
					return AccountMeResponse.builder()
						.name("홍길동")
						.email("A@gmail.com")
						.registeredAt(LocalDateTime.now())
						.build();
				}
			}
			
		3) api.config.objectmapper 패키지 생성 후 ObjectMapperConfig 클래스 생성
			- JsonNaming이나 날짜 관련 형식 등 자주 쓰이는 설정들을 한번에 관리 목적

			@Configuration
			public class ObjectMapperConfig {
				
				@Bean
				public ObjectMapper objectMapper() {
					var objectMapper = new ObjectMapper();
					
					objectMapper.registerModule(new Jdk8Module()); // jdk 8 버전 이후 클래스 파싱 등
					objectMapper.registerModule(new JavaTimeModule()); // << local date
					// 모르는 json field 에 대해서는 무시함
					objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
					objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
					objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); // 날짜 관련 직렬화
					// 스네이크 케이스
					objectMapper.setPropertyNamingStrategy(new PropertyNamingStrategies.SnakeCaseStrategy());
					
					return objectMapper;
				}
			}
			
			
5. Swagger UI 설정
	- 스웨거(Swagger)는 API 문서화, 디자인, 빌드, 테스트 및 사용을 위한 오픈 소스 SW 프레인워크.
	- 스웨거는 RESTful API 서비스를 개발하고 문서화하는데 도움을 주는 도구 모음.
	
	(1) API 문서화 : 스웨거는 API의 자동화된 문서를 생성하고 표시할 수 있음. 이를 통해 API 엔드포인트,
		요청 및 응답 형식, 매개변수, 인증 등을 포함한 APi의 세부 정보를 시각적으로 제공함.
		
	(2) 인터랙티브한 API UI : 스웨거 UI를 통해 API를 테스트하고 상호작용할 수 있음. 개발자는 스웨거
		UI를 통해 API 엔드포인트를 호출하고 요청을 보내며, 실시간으로 응답을 확인할 수 있음.
		
	(3) 코드 생성 : 스웨거는 API를 기반으로 클라리언트 라이브러리 및 서버 스텁 코드를 자동으로 생성할 수
		있음. 이를 통해 클라이언트 어플리케이션과 서버 사이의 통신을 간소화하고 개발 생산성을
		향상시킬 수 있음.
		
	(4) API 테스트 : 스웨거는 개발자가 API를 테스트하고 디버깅하는데 도움을 줌. 스웨거 UI를 사용하여
		다양한 요청을 보내고 응답을 확인할 수 있으며, 각 엔드포인트에 대한 예상 동작을 문서화하여 테스트
		케이스를 작성할 수도 있음.

	(6) maven repository 사이트
		- build.gradle(:api) dependencies에 추가
			// swagger
			implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
		
		-> 스프링 재시작 후 브라우저에 http://localhost:8080/swagger-ui/index.html
			
	(7) swagger에서 카멜 케이스 -> 스네이크 케이스
		- api.config.swagger 패키지 생성 후 SwaggerConfig 클래스 생성

			@Configuration
			public class SwaggerConfig {
				
				@Bean
				public ModelResolver modelResolver(ObjectMapper objectMapper) {
					return new ModelResolver(objectMapper);
				}
			}
			
		-> 스웨거 사이트 새로고침 후 Schemas에 AccountMeResponse에 registered_at으로 나오는지 확인


----------------------------------------------------------------------------------------------------------------------
[Ch.03 실전 프로젝트 2] - 프로젝트 베이스 개발

1. Filter를 통한 Request, Response Log 설정하기.

	(1) api.filter 패키지 생성 후 LoggerFilter 클래스 생성

		import jakarta.servlet.*;

		@Component
		@Slf4j
		public class LoggerFilter implements Filter {
			
			@Override
			public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
				
				var req = new ContentCachingRequestWrapper((HttpServletRequest) request); // 형변환
				var res = new ContentCachingResponseWrapper((HttpServletResponse) response); // 형변환
				
				chain.doFilter(req, res);
				
				// request 정보
				var headerNames = req.getHeaderNames();
				var headerValues = new StringBuilder();
				
				headerNames.asIterator().forEachRemaining(headerKey ->{
					var headerValue = req.getHeader(headerKey);
					
					// authorization-token : ??? , user-agent : ???
					headerValues.append("[").append(headerKey).append(" : ").append(headerValue).append("] ");
				});
				
				var requestBody = new String(req.getContentAsByteArray());
				var uri = req.getRequestURI();
				var method = req.getMethod();
				
				log.info(">>>>> uri : {}, method : {}, header : {}, body : {}", uri, method, headerValues, requestBody);
				
				
				// response 정보
				var responseHeaderValues = new StringBuilder();
				
				res.getHeaderNames().forEach(headerKey -> {
					var headerValue = res.getHeader(headerKey);
					
					responseHeaderValues.append("[").append(headerKey).append(" : ").append(headerValue).append("] ");
				});
				
				var responseBody = new String(res.getContentAsByteArray());
				
				log.info("<<<<< uri : {}, method : {}, header : {}, body : {}", uri, method, responseHeaderValues, responseBody);
				
				// responseBody의 내용을 읽었으므로 다시 초기화 시켜주는 코드
				// 아래 코드 없으면 responseBody가 비워져서 감
				res.copyBodyToResponse();
			}
		}
		
		-> localhost:8080/swagger-ui/index.html -> Execute 후 인텔리제이 콘솔에서 log 확인


2. API 공통 Spec 적용하기.
	- ex)
		{
			"result" : {
				"result_code" : "200",
				"result_message" : "OK",
				"result_description" : "성공"
			},
			
			"body" : {
				...,
				...
			}
		}

	(1) api.common.api 패키지 생성 후 Api 클래스, Result 클래스 생성

		@Data
		@NoArgsConstructor
		@AllArgsConstructor
		@Builder
		public class Result {
			private Integer resultCode;
			private String resultMessage;
			private String resultDescription;
			
			public static Result ok(){
				return Result.builder()
					.resultCode(200)
					.resultMessage("OK")
					.resultDescription("성공")
					.build();
			}
		}
		
		-------------------------------------------------------------

		@Data
		@NoArgsConstructor
		@AllArgsConstructor
		public class Api<T> {
			
			private Result result;
			
			@Valid
			private T body;
			
			public static <T> Api<T> OK(T data){
				var api = new Api<T>();
				api.result = Result.ok();
				api.body = data;
				return api;
			}
		}
		
		-> 이렇게 하면 위의 예시에 있는 JSON의 모양을 띄게 됨.

	(2) api.account 패키지에 AccountApiController 수정

		@GetMapping("/me")
		public Api<AccountMeResponse> me(){
			var response = AccountMeResponse.builder()
				.name("홍길동")
				.email("A@gmail.com")
				.registeredAt(LocalDateTime.now())
				.build();
			
			return Api.OK(response);
		}


3. API Error Code 적용하기.

	(1) api.common.error 패키지 생성 후 ErrorCode 이넘, UserErrorCode 이넘 생성

		@AllArgsConstructor
		public enum ErrorCode {
			
			OK(200, 200, "성공"),
			BAD_REQUEST(HttpStatus.BAD_REQUEST.value(), 400, "잘못된 요청"),
			SERVER_ERROR(HttpStatus.INTERNAL_SERVER_ERROR.value(), 500, "서버 에러"),
			NULL_POINT(HttpStatus.INTERNAL_SERVER_ERROR.value(), 512, "Null Point")
			
			;
			
			private final Integer httpStatusCode;
			private final Integer errorCode;
			private final String description;
		}
		
		-------------------------------------------------------------------------------
		@AllArgsConstructor
		public enum UserErrorCode {
			
			USER_NOT_FOUND(400, 1404, "사용자를 찾을 수 없음"),
			
			;
			
			private final Integer httpStatusCode;
			private final Integer errorCode;
			private final String description;
		}

	(2) api.common.error 패키지에 ErrorCodeIfs 인터페이스 생성 후 상속

		public interface ErrorCodeIfs {
			
			Integer getHttpStatusCode();
			Integer getErrorCode();
			String getDescription();
		}
		
		----------------------------------------------------
		
		@AllArgsConstructor
		@Getter
		public enum ErrorCode implements ErrorCodeIfs {
		
		----------------------------------------------------
		
		@AllArgsConstructor
		@Getter
		public enum UserErrorCode implements ErrorCodeIfs {

	(3) api.common.api 패키지에 Result 수정
		
		public static Result ok(){
			return Result.builder()
				.resultCode(ErrorCode.OK.getErrorCode())
				.resultMessage(ErrorCode.OK.getDescription())
				.resultDescription("성공")
				.build();
		}
		
		public static Result ERROR(ErrorCodeIfs errorCodeIfs){
			return Result.builder()
				.resultCode(errorCodeIfs.getErrorCode())
				.resultMessage(errorCodeIfs.getDescription())
				.resultDescription("에러발생")
				.build();
		}
		
		public static Result ERROR(ErrorCodeIfs errorCodeIfs, Throwable tx){
			return Result.builder()
				.resultCode(errorCodeIfs.getErrorCode())
				.resultMessage(errorCodeIfs.getDescription())
				.resultDescription(tx.getLocalizedMessage())
				.build();
		}
		
		public static Result ERROR(ErrorCodeIfs errorCodeIfs, String description){
			return Result.builder()
				.resultCode(errorCodeIfs.getErrorCode())
				.resultMessage(errorCodeIfs.getDescription())
				.resultDescription(description)
				.build();
		}
		
	(4) api.common.api 패키지에 Api 클래스 수정

		public static <T> Api<T> OK(T data){
			var api = new Api<T>();
			api.result = Result.ok();
			api.body = data;
			return api;
		}
		
		// 에러발생시 body는 필요X
		public static Api<Object> ERROR(Result result){
			var api = new Api<Object>();
			api.result = result;
			return api;
		}
		
		public static Api<Object> ERROR(ErrorCodeIfs errorCodeIfs){
			var api = new Api<Object>();
			api.result = Result.ERROR(errorCodeIfs);
			return api;
		}
		
		public static Api<Object> ERROR(ErrorCodeIfs errorCodeIfs, Throwable tx){
			var api = new Api<Object>();
			api.result = Result.ERROR(errorCodeIfs, tx);
			return api;
		}
		
		public static Api<Object> ERROR(ErrorCodeIfs errorCodeIfs, String description){
			var api = new Api<Object>();
			api.result = Result.ERROR(errorCodeIfs, description);
			return api;
		}
		
	(5) AccountApiController 수정
	
		@GetMapping("/me")
		public Api<Object> me(){
			var response = AccountMeResponse.builder()
				.name("홍길동")
				.email("A@gmail.com")
				.registeredAt(LocalDateTime.now())
				.build();
			
			return Api.ERROR(UserErrorCode.USER_NOT_FOUND, "홍길동 이라는 사용자 없음");
		}
		
		-> swagger에서 확인!


4. Exception Handler 적용하기 - 1
	- 서버에서 일어나는 전체적인 예외 잡기
	- 우리가 예외를 정의해서 우리만의 커스텀 예외를 만들기

	(1) api.exceptionhandler 패키지 생성 후 GlobalExceptionHandler 클래스 생성

		@Slf4j
		@RestControllerAdvice // 예외를 이곳으로 전부 끌어 모으기
		@Order(value = Integer.MAX_VALUE) // 가장 마지막에 실행적용
		public class GlobalExceptionHandler {
			
			@ExceptionHandler(value = Exception.class)
			public ResponseEntity<Api<Object>> exception(
				Exception exception
			){
				log.error("", exception);
				
				return ResponseEntity
					.status(500)
					.body(
						Api.ERROR(ErrorCode.SERVER_ERROR)
					);
			}
		}

	(2) AccountApiController 수정

		@GetMapping("/me")
		public Api<AccountMeResponse> me(){
			var response = AccountMeResponse.builder()
				.name("홍길동")
				.email("A@gmail.com")
				.registeredAt(LocalDateTime.now())
				.build();
			
			var str = "안녕하세요";
			var age = Integer.parseInt(str);
			
			return Api.OK(response);
		}

		-> swagger에서 Execute 누르면 콘솔에서 에러메세지 확인가능


----------------------------------------------------------------------------------------------------------------------