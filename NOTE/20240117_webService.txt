[Course 4] 프로젝트로 시작하는 웹 서비스 개발

[Ch.01 Web Service의 인증]

--------------------------------------------------
※ Spring initializr
	(1) session 프로젝트
		1) Peoject : Gradle - Groovy
		2) Language : Java
		3) Spring Boot : 3.2.1
		4) Metadata : com.example.session
		5) dependencies : Lombok, Spring Web
		
	(2) cookie 프로젝트
		1) Peoject : Gradle - Groovy
		2) Language : Java
		3) Spring Boot : 3.2.1
		4) Metadata : com.example.cookie
		5) dependencies : Lombok, Spring Web
	
	(3) jwt 프로젝트
		1) Peoject : Gradle - Groovy
		2) Language : Java
		3) Spring Boot : 3.2.1
		4) Metadata : com.example.jwt
		5) dependencies : Lombok, Spring Web
--------------------------------------------------

1. 로그인 인증
	(1) ID / PW 기반 로그인
	(2) 소셜 로그인(Oauth2)
	(3) 이메일 인증
	(4) 휴대폰 인증
	(5) 다중 인증요소(MFA)


2. HTTP SESSION
	- 웹 어플리케이션에서 사용자 정보를 저장하는 기술.
	- 사용자의 세션은 웹 어플리케이션에 접속 한 후, 일정 시간 동안 유지되는 정보.
	
	(1) 특징
		1) HTTP 프로토콜은 Stateless 한 특성을 가지기 떄문에 사용자가 다시 요청을 보낼 때마다 사용자 정보를
		   매번 다시 전송해야함. HTTP Session은 이러한 문제를 해결하기 위해 사용자 정보를 서버 측에서
		   저장하고 관리하는 세션 ID를 발급함.
		2) HTTP Session은 쿠키(Cookie)를 사용하여 구현됨.
		3) HTTP Session은 사용자 로그인 정보를 관리할 때 사용하며, 사용자가 다시 접속하여도 유지됨.
		4) Http Session은 서버에서 관리되기 때문에 사용자가 임의로 세션 정보를 조작 할 수 없음.
		   해당 값은 랜덤한 값으로 생성되며, HTTPS를 통해서 암호화 됨.
	
	(2) 인증 과정
		1) 사용자가 로그인 시도.
		2) 서버는 사용자의 인증 정보를 검증하여 session id를 생성.
		3) 세션은 서버측에서 관리되며, 서버에서 갱신 및 정보를 변경 할 수 있음.
		4) 세션 ID는 쿠키(cookie) 방식으로 사용자에게 전달되며, 웹 어플리케이션에서 사용함.

		
3. HTTP Cookie
	- 웹 브라우저와 웹 서버 간에 상태 정보를 유지하기 위한 기술.
	- 클라이언트의 브라우저는 이를 로컬에 저장하고 필요할 때마다 서버에 전송하여 사용자 상태 정보를 유지함.
	- 쿠키는 HTTP 헤더에 Set-Cookie와 같은 헤더를 통해 서버에서 클라이언트에 전송됨.
	- 쿠키는 키/값 쌍으로 이루어져 있으며, 이름, 값, 유효기간, 도메인, 경로 등의 정보를 포함.
	
	(1) 특징
		1) 쿠키는 클라이언트 측에 저장됨. 따라서 서버가 클라이언트의 상태 정보를 확인하려면, 쿠키를
		   클라이언트에서 전송받아야 함.
		2) 쿠키는 유효기간을 가지고 있음. 유효기간이 지나면 쿠키는 삭제됨.
		3) 쿠키는 보안 문제가 있을 수 있음. 쿠키에 민감한 정보를 저장하는 경우 HTTPS와 같은 보안
		   프로토콜을 사용하여 암호화해야 함.
		4) 쿠키는 브라우저에서 관리되기 때문에 브라우저에서 쿠키를 삭제하거나 다른 브라우저에서 접속하는
		   경우에는 쿠키를 공유할 수 없음.
		   
	(2) 인증
		- 쿠키를 통한 인증은 많은 곳에서 사용하고 있음.
		
		1) 사용자가 로그인 페이지에 접속하여 로그인 정보를 입력함.
		2) 서버는 사용자 정보를 검증하고, 인증이 성공하면 사용자의 고유 ID와 함께 인증 토큰(쿠키)을 생성함.
		3) 서버는 생성된 인증 토큰(쿠키)을 HTTP응답 헤더에 포함하여 클라이언트에게 전송.
		4) 클라이언트는 전송받은 인증 토큰(쿠키)을 로컬에 저장.
		5) 클라이언트는 이후 서버에 요청을 보낼 때마다 인증 토큰(쿠키)을 HTTP 요청 헤더에 포함하여 전송함.
		6) 서버는 전송받은 인증 토큰(쿠키)을 검증하여, 인증이 성공하면 요청에 대한 응답을 생성함.

	
4. HTTP Header 인증
	- 서버와 클라이언트 간의 인증을 HTTP 헤더를 통해서 수행하는 방식.
	- Http Basic, Http Digest, Oauth와 같은 프로토콜을 통해서 구현되는게 일반적.
	- 특정 header에 token을 넣어서 사용자를 인식하고 인증함.
	
	<cookie 프로젝트> 수정
	
	(1) index.html
		$(function () {
			$('#login-btn').on('click', function () {
				var username = $('#username').val();
				var password = $('#password').val();

				$.ajax({
					url: '/api/account/login',
					method: 'POST',
					contentType: 'application/json', // JSON 형식으로 데이터 전송
		<!--        dataType: 'json', // 받아오는 데이터 타입을 JSON으로 설정-->
					data: JSON.stringify({ id: username, password: password }), // 데이터를 JSON 문자열로 변환하여 전송
					success: function(response){
						console.log(response);
					},
					complete: function (xhr, status) {
						if (xhr.status == 200) {
							alert("로그인 성공")
						} else {
							alert("로그인 실패")
						}
					}
				});
			});
		});
	
	(2) AccountApiController 수정
		@PostMapping("/login")
		public String login(
				@RequestBody
				LoginRequest loginRequest,
				HttpServletResponse httpServletResponse
		) {
			return userService.login(loginRequest, httpServletResponse);
		}
		
	(3) UserService 수정
		public String login(
				LoginRequest loginRequest,
				HttpServletResponse httpServletResponse
		){
			// 중요 쿠키 세팅
			var id = loginRequest.getId();
			var pw = loginRequest.getPassword();

			var optionalUser = userRepository.findByName(id);

			if(optionalUser.isPresent()){
				var userDto = optionalUser.get();

				if(userDto.getPassword().equals(pw)){
					return userDto.getId();
				}
			}else {
				throw new RuntimeException("User Not Found");
			}

			return null;
		}
		
	(4) UserApiController 수정
		
		public class UserApiController {

			private final UserRepository userRepository;

			@GetMapping("/me")
			public UserDto me(
				HttpServletRequest httpServletRequest,
				@CookieValue(name = "authorization-cookie", required = false)
				String authorizationCookie
			) {
				log.info("authorizationCookie : {}", authorizationCookie);
				var optionalUserDto = userRepository.findById(authorizationCookie);
				return optionalUserDto.get();

		/*        var cookies = httpServletRequest.getCookies();

				if(cookies != null){
					for (Cookie cookie : cookies){
						log.info("key : {}, value : {}", cookie.getName(), cookie.getValue());
					}
				}*/

		//        return null;
			}

			@GetMapping("/me2")
			public UserDto me2(
				@RequestHeader(name = "authorization", required = false)
				String authorizationHeader
			){
				log.info("authorizationHeader : {}", authorizationHeader);
				var optionalUserDto = userRepository.findById(authorizationHeader);
				return optionalUserDto.get();
			}
		}
		
		-> 브라우저에 http://localhost:8080 으로 들어가서 아이디/비번 치면 콘솔창에 값(token) 생성
		-> 해당 값을 TAT에서 cookie프로젝트에 test01에 'http://localhost:8080/api/user/me2'
			에서 HEADER에 name에 authorization, value에 위의 콘솔창에 token값을 복붙하고 실행
		-> 성공 확인!
		
	(5) AccountApiController 수정
		
		@PostMapping("/login")
		public String login(
				@RequestBody
				LoginRequest loginRequest,
				HttpServletResponse httpServletResponse,
				HttpSession httpSession
		) {
			return userService.login(loginRequest, httpServletResponse);
		}
		
		-> localhost:8080 에서 로그인 실패시 에도 개발자도구(application)에서 JSESSIONID 확인가능.


5. JWT Token 인증
	- JWT(JSON Web Token)는 웹 표준으로써 데이터의 JSON 객체를 사용하여 가볍고 자가 수용적인 방식으로
		정보를 안전하게 전달할 수 있도록 설계된 토큰 기반의 인증 방식.
	- JWT는 URL, HTTP Header, HTML Form과 같은 다양한 방식으로 전달할 수 있으며, 서버와 클라이언트 간의
		인증 정보를 포함.
	- JWT는 Header, Payload, Signature 세부분으로 구성.
		- Header는 JWT의 타입과 암호화 알고리즘 등을 포함하며, JSON 형식으로 인코딩됨.
		- Payload는 클레임 정보를 포함하며, JSON 형식으로 인코딩됨. 클레임 정보는 사용자 ID, 권한 등의
			정보를 포함할 수 있음.(우리가 원하는 값)
		- Signature는 Header와 Payload를 조합한 후, 비밀 키를 사용하여 생성된 서명 값.
			서명 값은 토큰의 무결성을 보장하며, JWT를 조작하지 않았다는 것을 검증함.
	- 참고사이트 : https://jwt.io/ , https://www.base64decode.org/
		

	(1) jwt.io 사이트에서 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 를 복사 후, 디코드 사이트에 붙여넣고
		DECODE를 하면 JSON으로 된 어떤 문자열인지 출력.
		
	(2) 인증 방식
		1) 클라이언트가 서버에 로그인 요청을 보냄.
		2) 서버는 로그인 요청을 검증하고, 유효한 사용자라면 JWT를 생성하여 클라이언트에게 반환함.
		3) 클라이언트는 이후 요청에 JWT를 포함시켜 전송함.
		4) 서버는 JWT를 검증하여, 클라이언트의 인증 여부를 판단함.
		
	(3) 장/단점
		1) 장점
			- 토큰 기반의 인증 방식이므로, 서버 츨에서 별도의 세션 저장소를 유지할 필요 없음.
			- JSON 형식으로 인코딩되므로, 다양한 플랫폼 간에 쉽게 전송 및 구현할 수 있음.
			- Signature를 사용하여 무결성을 보장하므로, 토큰이 변조되었는지 여부를 쉽게 검증할 수 있음.
			
		2) 단점
			- JWT의 크기가 커질 경우, 네트워크 대역폭이 증가하게 됨.
			- JWT는 한 번 발급된 후에는 내부 정보를 수정할 수 없으므로, 만료 시간을 짧게 설정해야 함.
			- JWT를 탈취당하면, 해당 토큰을 사용한 모든 요청이 인증되므로, 보안 위협이 될 수 있음.
				따라서 HTTPS와 같은 보안 프로토콜을 사용하여 JWT를 전송해야 함.

	(4) Library 찾기
		1) jwt.io 사이트에서 -> Libraries 탭 -> 우측 드롭다운에서 Java 선택
			-> 가장 많이 다운로드된 이름 복사 -> maven repository에서 해당 lib 가져오기
			-> jjwt-api, jjwt-impl, jjwt-jackson
			-> 각각 타이틀 클릭 후 버전 선택 후 Gradle에 해당하는 코드 복사
				(jjwt-api : 0.11.5, jjwt-impl : 0.11.5, jjwt-jackson : 0.11.5)
				
		2) 인텔리제이 build.gradle 파일에 dependencies에 붙여넣기
			dependencies {
				implementation 'org.springframework.boot:spring-boot-starter-web'
				compileOnly 'org.projectlombok:lombok'
				annotationProcessor 'org.projectlombok:lombok'
				testImplementation 'org.springframework.boot:spring-boot-starter-test'

				// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api
				implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
				// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-impl
				runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
				// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-jackson
				runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
			}
			-> 우측 상단에 코끼리 모양 클릭으로 새로고침!!

	(5) jwt.service 패키지 생성
		
		1) JwtService 작성
			@Slf4j
			@Service
			public class JwtService {

				private static String secretKey = "java11SpringBootJWTTokenIssueMethod";

				public String create(
					Map<String, Object> claims,
					LocalDateTime expireAt
				){
					var key = Keys.hmacShaKeyFor(secretKey.getBytes());
					// LocalDateTime의 타입을 원하는 Date 형태로 변환
					var _expiredAt = Date.from(expireAt.atZone(ZoneId.systemDefault()).toInstant());

					return Jwts.builder()
						.signWith(key, SignatureAlgorithm.HS256)
						.setClaims(claims)
						.setExpiration(_expiredAt)
						.compact();
				}

				public void validation(String token){
					var key = Keys.hmacShaKeyFor(secretKey.getBytes());
					
					var parser = Jwts.parserBuilder()
						.setSigningKey(key)
						.build();
					
					try {
						var result = parser.parseClaimsJws(token); // 예외 발생
						
						result.getBody().entrySet().forEach(value -> {
							log.info("key : {}, value : {}", value.getKey(), value.getValue());
						});
					} catch (Exception e) {
						if (e instanceof SignatureException) {
							throw new RuntimeException("JWT Token Not Valid Exception");
						} else if (e instanceof ExpiredJwtException) {
							throw new RuntimeException("JWT Token Expired Exception");
						} else {
							throw new RuntimeException("JWT Token Validation Exception");
						}
					}
				}

			}
		
		2) test에 JwtApplicationTests 에 간단히 추가 후 테스트
			
			@SpringBootTest
			class JwtApplicationTests {
				
				@Autowired
				private JwtService jwtService;
				
				@Test
				void contextLoads() {
				}
				
				@Test
				void tokenCreate(){
					var claims = new HashMap<String, Object>();
					claims.put("user_id", 923);
					
					var expiredAt = LocalDateTime.now().plusSeconds(30); // token 유효시간
					var jwtToken = jwtService.create(claims, expiredAt);
					
					System.out.println("token : " + jwtToken);
				}
				
				@Test
				void tokenValidation(){
					var token = "eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo5MjMsImV4cCI6MTcwNTU1OTk2Nn0.NoVpifIx2ZioNxqQ7bO64O19AQeDgkI_0ZiQ2B6cSFk";
					
					jwtService.validation(token);
				}
			}
			
		-> tokenCreate() 왼쪽에 실행시키고 30초 내에 콘솔창에 토큰을 복사해서 tokenValidation()의 token에 
			넣고 tokenValidation() 테스트 실행 시키면 성공!
		-> 30초 후에 다시 tokenValidation() 실행시키면 JWT Token Expired Exception 에러메세지 확인!!
			
		
----------------------------------------------------------------------------------------------------------------------
