[Ch.09 Spring Boot Web 활용]


----------------------------------------------------------------------------------------------------------
<03. Spring AOP> - filter 프로젝트
※ 준비
	- filter.filter 패키지에 LoggerFilter에서 @Component 주석처리
	- filter.config 패키지에 WebConfig에서 registry.add~~ 주석처리


1. TAT에서 filter 프로젝트 -> UserRegister에서 POST로 다음 실행
	{
		"name" : "홍길동",
		"phone_number" : "0101111-2222",
		"age" : 100,
		"email" : "hong@gmail.com"
	}
	
2. build.gradle 파일에 추가
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}
-> 새로고침 후 오른쪽 아이콘에서 Dependencies -> compileClasspath에 aop 관련 생기면 OK!


3. filter.aop 패키지 생성 후 TimerAop 클래스 생성.

	(1) 1단계
		@Aspect
		@Component
		public class TimerAop {

			// Spring에서 관리되는 Bean들에게만 AOP가 동작함.
			@Pointcut(value = "within(com.example.filter.controller.UserApiController)")
			public void timerPointCut() {

			}

			@Around(value = "timerPointCut()")
			public void around(ProceedingJoinPoint joinPoint) throws Throwable {
				System.out.println("메소드 실행 이전");

				joinPoint.proceed();

				System.out.println("메소드 실행 이후");
			}
		}
		
		-> TAT 에서 UserRegister 실행 -> 인텔리제이 콘솔에서 AOP 메세지 확인.

	(2) 2단계
		
		@Aspect
		@Component
		public class TimerAop {

			// Spring에서 관리되는 Bean들에게만 AOP가 동작함.
			@Pointcut(value = "within(com.example.filter.controller.UserApiController)")
			public void timerPointCut() {

			}

			// 메소드 시작 전
			@Before(value = "timerPointCut()")
			public void before(JoinPoint joinPoint){
				System.out.println("before");
			}

			// 메소드 종료 후
			@After(value = "timerPointCut()")
			public void after(JoinPoint joinPoint){
				System.out.println("after");
			}

			// 메소드 성공했을 때 결과 값 받을 때 사용
			@AfterReturning(value = "timerPointCut()", returning = "result")
			public void afterReturning(JoinPoint joinPoint, Object result){
				System.out.println("after returning");
			}

			// 예외가 발생했을 때 예외를 잡을 수 있음
			@AfterThrowing(value = "timerPointCut()", throwing = "tx")
			public void afterThrowing(JoinPoint joinPoint, Throwable tx){
				System.out.println("after throwing");
			}

			// 메소드 실행 앞, 뒤로 잡음
			@Around(value = "timerPointCut()")
			public void around(ProceedingJoinPoint joinPoint) throws Throwable {
				System.out.println("메소드 실행 이전[around]");

				Arrays.stream(joinPoint.getArgs()).forEach(it -> {
		//            System.out.println(it);
					if(it instanceof UserRequest){
						var tempUser = (UserRequest) it;
						var phoneNumber = tempUser.getPhoneNumber().replace("-", "");
						tempUser.setPhoneNumber(phoneNumber);
					}
				});

				// 암/복호화, 로깅 등의 용도
				var newObjs = Arrays.asList(
						new UserRequest()
				);

				// 서비스 오픈 준비 등 개발시 특정 API 등 이 느릴 때
				// 의심가는 구간 시간체크 용도
				var stopWatch = new StopWatch();
				stopWatch.start();
				joinPoint.proceed(newObjs.toArray()); // 시간 의심가는 메소드, 예외 발생 메소드

				stopWatch.stop();

				System.out.println("총 소요된 시간 ms = " + stopWatch.getTotalTimeMillis());

				System.out.println("메소드 실행 이후[around]");
			}
		}
		
		-> TAT UserRegister 실행시키면 AOP 메소드들의 순서를 콘솔 메세지로 알 수 있음!!
		-> 예외까지 적용시켜 보려면 UserApiController에서 아래처럼 수정 후
			public UserRequest register(
				@RequestBody
				UserRequest userRequest
			) {
				log.info("{}", userRequest);
				throw new NumberFormatException("joinPoint.proceed() 임의 예외 발생!!");
		//        return userRequest;
			}
			-> TAT 다시 실행시키면 콘솔창에서 예외 순서까지 확인 가능!!















----------------------------------------------------------------------------------------------------------